#//-------------------------------------------------------------
#//
#//		Define of Memory		【メモリ空間の定義】
#//			- Memory Name
#//			- Address area
#//			- Output ROM-image File struct	（作るNESファイルの構造）
#//
#//-------------------------------------------------------------
MEMORY {

	#//-----------------------------------
	#// iNES Header
	#//-----------------------------------

	#// 16bytes INES Cartridge Header
	HEADER: start = $0, size = $10, file = %O ,fill = yes;



	#//-----------------------------------
	#// Program ROM
	#//-----------------------------------

	#// $8000 - $BFFF (16kbytes) ROM Bank_s
	Bank_00:	start = $8000, size = $4000, file = %O ,fill = yes;
#//	Bank_01:	start = $A000, size = $2000, file = %O ,fill = yes;
	Bank_02:	start = $8000, size = $4000, file = %O ,fill = yes;
#//	Bank_03:	start = $A000, size = $2000, file = %O ,fill = yes;
	Bank_04:	start = $8000, size = $4000, file = %O ,fill = yes;
#//	Bank_05:	start = $A000, size = $2000, file = %O ,fill = yes;
	Bank_06:	start = $8000, size = $4000, file = %O ,fill = yes;
#//	Bank_07:	start = $A000, size = $2000, file = %O ,fill = yes;
	Bank_08:	start = $8000, size = $4000, file = %O ,fill = yes;
#//	Bank_09:	start = $A000, size = $2000, file = %O ,fill = yes;

	Bank_0A:	start = $8000, size = $2000, file = %O ,fill = yes;
	Bank_0B:	start = $A000, size = $2000, file = %O ,fill = yes;
	Bank_0C:	start = $8000, size = $2000, file = %O ,fill = yes;
	Bank_0D:	start = $A000, size = $2000, file = %O ,fill = yes;

	#// $8000 - $9FFF (8kbytes) ROM Bank_s for delta PCM
	Bank_0E:	start = $C000, size = $2000, file = %O ,fill = yes;

	#// $E000 - $FFFB (8k - 6bytes) ROM Bank_s for system program, and main function.
	Bank_0F:	start = $E000, size = $1ffa, file = %O ,fill = yes;
	#// 6bytes Hardware interrupt Vectors
	Bank_Vec:	start = $fffa, size = $0006, file = %O ,fill = yes;



	#//-----------------------------------
	#// Character ROM
	#//-----------------------------------
	#// 8kbytes CHR Bank_
	CBank_00:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_01:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_02:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_03:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_04:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_05:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_06:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_07:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_08:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_09:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_0A:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_0B:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_0C:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_0D:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_0E:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_0F:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_10:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_11:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_12:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_13:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_14:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_15:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_16:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_17:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_18:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_19:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_1A:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_1B:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_1C:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_1D:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_1E:	start = $0000, size = $1000, file = %O, fill = yes;
	CBank_1F:	start = $0000, size = $1000, file = %O, fill = yes;



	#//-----------------------------------
	#// standard 2k SRAM in Substance
	#//-----------------------------------

	#// $0000-$004F 0.5 page for Zeropage of General
	ZP:			start = $0000, size = $0060, type = rw, define = yes;

	#// $0050-$007F 0.5 page for Zeropage of PPUDRV
	ZP_PPUDRV:	start = $0060, size = $0040, type = rw, define = yes;
	#//	■■■to do Other Segments of PPU Draw (NMI/IRQ) System

	#// $0080-$00FF 0.5 page for Zeropage of each Scene
	#//	■■■to do Other Segments
	ZP_Logo:	start = $00A0, size = $0060, type = rw, define = yes;
	ZP_Title:	start = $00A0, size = $0060, type = rw, define = yes;
	ZP_Stage:	start = $00A0, size = $0060, type = rw, define = yes;
	ZP_Credit:	start = $00A0, size = $0060, type = rw, define = yes;
	ZP_Ending:	start = $00A0, size = $0060, type = rw, define = yes;

	#// $0100-$01FF 1 page for Stack
	STACK:		start = $0100, size = $0080, type = rw, define = yes;

	#// $0300-$04FF 2 page for BSS of System
	RAM:		start = $0180, size = $0180, type = rw, define = yes;

	#// $0200-$02FF 1 page  for sprite DMA buffer
	SPRAM:		start = $0300, size = $0100, type = rw, define = yes;

	#// $0500-$07FF 3 page for BSS of each Scene
	RAM_Logo:	start = $0400, size = $0400, type = rw, define = yes;
	RAM_Title:	start = $0400, size = $0400, type = rw, define = yes;
	RAM_Stage:	start = $0400, size = $0400, type = rw, define = yes;
	RAM_Credit:	start = $0400, size = $0400, type = rw, define = yes;
	RAM_Ending:	start = $0400, size = $0400, type = rw, define = yes;



	#//-----------------------------------
	#// Battery backup RAM in Cartridge
	#//-----------------------------------

	#// $6000-$7FFF
	BRAM:		start = $6000, size = $2000, type = rw, define = yes;

}



#//-------------------------------------------------------------
#//
#//		Define of Segment		【セグメントの定義】
#//			- Relation between this "Segment" and "Memory"
#//			- Segment Type (ROM, Variable data, BSS DATA, Zeropage)
#//
#//-------------------------------------------------------------
SEGMENTS {
	#//-----------------------------------
	#// iNES Header
	#//-----------------------------------
	HEADER:   load = HEADER,				type = ro;


	#//-----------------------------------
	#// Program ROM
	#//-----------------------------------
	SE:				load = Bank_00,				type = ro,  define = yes;
	MUS00:			load = Bank_00,				type = ro,  define = yes;
	MUS01:			load = Bank_02,				type = ro,  define = yes;
	MUS02:			load = Bank_04,				type = ro,  define = yes;
	MUS03:			load = Bank_06,				type = ro,  define = yes;

	#// (8K) $8000 - $9FFF
	Logo_CODE:		load = Bank_0D,				type = ro,  define = yes;
	Title_CODE:		load = Bank_0C,				type = ro,  define = yes;
	Credit_CODE:	load = Bank_0C,				type = ro,  define = yes;
	Stage_CODE:		load = Bank_0C,				type = ro,  define = yes;
	Ending_CODE:	load = Bank_0C,				type = ro,  define = yes;

	#// (8K) $A000 - $BFFF
	Logo_DATA:		load = Bank_0D,				type = ro,  define = yes;
	Title_DATA:		load = Bank_0D,				type = ro,  define = yes;
	Credit_DATA:	load = Bank_0D,				type = ro,  define = yes;
	Stage_DATA:		load = Bank_0D,				type = ro,  define = yes;
	Ending_DATA:	load = Bank_0D,				type = ro,  define = yes;

	#// (8k) $C000 - $DFFF
	PCMDATA:		load = Bank_0E,				type = ro,  define = yes;

	#// (8k) $E000 - $EFFF
	STARTUP:		load = Bank_0F,				type = ro,  define = yes;
	LOWCODE:		load = Bank_0F,				type = ro,                optional = yes;
	INIT:			load = Bank_0F,				type = ro,  define = yes, optional = yes;
	PPUDRV_CODE:	load = Bank_0F,				type = ro,  define = yes;
	MATH_CODE:		load = Bank_0F,				type = ro,  define = yes;
	MATH_DATA:		load = Bank_0F,				type = ro,  define = yes;
	CODE:			load = Bank_0F,				type = ro,  define = yes;
	RODATA:			load = Bank_0F,				type = ro,  define = yes;
	DATA:			load = Bank_0F, run = RAM,	type = rw,  define = yes;
	VECTORS:		load = Bank_Vec,			type = ro;


	#//-----------------------------------
	#// Character ROM
	#//-----------------------------------
	ASCII:			load = CBank_00,			type = ro;
	CHR_LOGO_BG:	load = CBank_02,			type = ro;
	CHR_LOGO_SPR:	load = CBank_03,			type = ro;


	#//-----------------------------------
	#// RAMS
	#//-----------------------------------
	ZEROPAGE:	load = ZP,					type = zp,  define = yes;
	PPUDRV_ZP:	load = ZP_PPUDRV,			type = zp,  define = yes;
	SPRITE:		load = SPRAM,				type = bss, define = yes;
	BSS:		load = RAM,					type = bss, define = yes;
	HEAP:		load = RAM,					type = bss, optional = yes;

	Logo_ZP:	load = ZP_Logo,				type = zp,  define = yes;
	Title_ZP:	load = ZP_Title,			type = zp,  define = yes;
	Stage_ZP:	load = ZP_Stage,			type = zp,  define = yes;
	Credit_ZP:	load = ZP_Credit,			type = zp,  define = yes;
	Ending_ZP:	load = ZP_Ending,			type = zp,  define = yes;

	Logo_BSS:	load = RAM_Logo,			type = bss, define = yes;
	Title_BSS:	load = RAM_Title,			type = bss, define = yes;
	Stage_BSS:	load = RAM_Stage,			type = bss, define = yes;
	Credit_BSS:	load = RAM_Credit,			type = bss, define = yes;
	Ending_BSS:	load = RAM_Ending,			type = bss, define = yes;

}



#//-------------------------------------------------------------
#//
#//		Define of Symbol		【シンボルの定義】
#//			You can use they Symbol in assembly language source.
#//			アセンブリ言語のソースで、このシンボルを使えます。
#//			これらのシンボルへの.import宣言は、"define.inc"にあります。
#//
#//-------------------------------------------------------------
SYMBOLS  {

	#//===============================================================
	#//	ＰＲＧ−ＲＯＭ　バンク定義
	#//---------------------------------------------------------------

	PBNK_SE:			type = export,	value = $00;
	PBNK_MUS0:			type = export,	value = $00;
	PBNK_MUS1:			type = export,	value = $02;
	PBNK_MUS2:			type = export,	value = $04;
	PBNK_MUS3:			type = export,	value = $06;

	PBNK_Logo_CODE:		type = export,	value = $0C;
	PBNK_Title_CODE:	type = export,	value = $0C;
	PBNK_Credit_CODE:	type = export,	value = $0C;
	PBNK_Stage_CODE:	type = export,	value = $0C;
	PBNK_Ending_CODE:	type = export,	value = $0C;

	PBNK_Logo_DATA:		type = export,	value = $0D;
	PBNK_Title_DATA:	type = export,	value = $0D;
	PBNK_Credit_DATA:	type = export,	value = $0D;
	PBNK_Stage_DATA:	type = export,	value = $0D;
	PBNK_Ending_DATA:	type = export,	value = $0D;

	PBNK_DPCM:			type = export,	value = $0E;	#//最終バンク −１
	PBNK_BIOS:			type = export,	value = $0F;	#//最終バンク



	#//===============================================================
	#//	ＣＨＲ−ＲＯＭ　バンク定義
	#//---------------------------------------------------------------

	CBNK_ASCII:			type = export,	value = $00;
	CBNK_LOGO_BG:		type = export,	value = $08;
	CBNK_LOGO_SPR:		type = export,	value = $0C;


}
